# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*



// var repoList = document.querySelector('ul');
// var fetchButton = document.getElementById('fetch-button');

// function getApi() {
//   // replace `octocat` with anyone else's GitHub username
//   var requestUrl = 'http://api.agromonitoring.com/agro/1.0/polygons/5abb9fb82c8897000bde3e87?appid=test';

//   fetch(requestUrl)
//     .then(function (response) {
//       return response.json();
//     })
//     .then(function (data) {
//       for (var i = 0; i < data.length; i++) {
//         var listItem = document.createElement('li');
//         listItem.textContent = data[i].html_url;
//         repoList.appendChild(listItem);
//       }
//     });
// }

// fetchButton.addEventListener('click', getApi);
 



// async function logPolys() {
    // const response = await fetch("http://api.agromonitoring.com/agro/1.0/polygons/5abb9fb82c8897000bde3e87?appid=test");
    // const polygons = await response.json();
    // console.log(polygons);
    // }
              

                       
 const halfSide = 250;

  // Calculate the latitudinal and longitudinal offsets for the square
  const latOffset = halfSide / 111111; // 1 degree of latitude is approximately 111,111 meters
  const lonOffset = halfSide / (111111 * Math.cos(latitude * Math.PI / 180)); // Correct for longitude offset due to latitude

  // Define the four corners of the square by adding/subtracting the offsets from the center
  const topLeft = [latitude + latOffset, longitude - lonOffset];
  const topRight = [latitude + latOffset, longitude + lonOffset];
  const bottomLeft = [latitude - latOffset, longitude - lonOffset];
  const bottomRight = [latitude - latOffset, longitude + lonOffset];

  var square = [topLeft, topRight, bottomLeft, bottomRight]
  console.log(square)


// Global variables
let bgContainer = document.querySelector(".bg-container");
let searchInput = document.querySelector("#searchInput");
let searchBtn = document.querySelector("#searchBtn");
let modalContainer = document.querySelector("#modal");
let modalCloseBtn = document.querySelector("#modalClose");
let overlayEl = document.querySelector("#overlay");
let latitude;
let longitude;

// Recall relevant data based on the location searched
searchBtn.addEventListener("click", function(event){
    event.preventDefault();
    let searchValue = searchInput.value.trim();
    if(searchValue === ''){
        displayModalContainer("Location not found", "Please enter the required location information.");
        return;
    }else{
        bgContainer.classList.add("height-change");
    }

});


// Display the modal box, it disappears when the background or close button is clicked
function displayModalContainer(title, text){
    let modalTitle = document.getElementById("modal-title");
    let modalText = document.getElementById("modal-text");

    // It enables reuse
    modalTitle.textContent = title;
    modalText.textContent = text;

    modalContainer.style.display = "block";
}

overlayEl.addEventListener("click", function(event){
    if(event.target === overlayEl){
        modalContainer.style.display = "none";
    }
})

modalCloseBtn.addEventListener("click", function(){
    modalContainer.style.display = "none";

});
// "location IQ"
var key = "pk.5c29facfe59285e81d61594415350065"
var api = "https://us1.locationiq.com/v1/search.php?format=json&"


function getLatAndLong(search) {
    fetch(api + "key=" + key + "&q=" + search)
      .then(function (res) {
        return res.json()
      })
      .then(function (data) {
        console.log(data)
        latitude = data[0].lat
        longitude = data[0].lon
        satelliteFunction(latitude, longitude)
      })
  }

  searchBtn.addEventListener("click", function () {
    let search = document.getElementById('searchInput').value.trim();
    getLatAndLong(search)
  })

  function satelliteFunction(latitude, longitude) {
    console.log("latitude", latitude)
    console.log("longitude", longitude)
  };

  // "Get list of Polys".
  const apiKey = '5377301dcdca71537669d26ce2c115d4';
  const apiUrl = 'https://api.agromonitoring.com/agro/1.0';
    const getListOfPolygons = async () => {
    try {
      const response = await fetch(`${apiUrl}/polygons?appid=${apiKey}`);
   
      if (!response.ok) {
        throw new Error('Failed to fetch the list of polygons');
      }
   
      const data = await response.json();
      console.log('List of polygons:', data);
    } catch (error) {
      console.error('Error fetching the list of polygons:', error.message);
    }
   };
   getListOfPolygons();

   
//   "Create Poly"

// create sperate function for this
//const polygonCoordinates = [longitude, latitude];
const createPolygon = async () => {
const halfSide = 250;

    // Calculate the latitudinal and longitudinal offsets for the square
    const latOffset = halfSide / 111111; // 1 degree of latitude is approximately 111,111 meters
    const lonOffset = halfSide / (111111 * Math.cos(latitude * Math.PI / 180)); // Correct for longitude offset due to latitude
  
    // Define the four corners of the square by adding/subtracting the offsets from the center
    const topLeft = [latitude + latOffset, longitude - lonOffset];
    const topRight = [latitude + latOffset, longitude + lonOffset];
    const bottomLeft = [latitude - latOffset, longitude - lonOffset];
    const bottomRight = [latitude - latOffset, longitude + lonOffset];
  
    var square = [topLeft, topRight, bottomLeft, bottomRight]
    console.log(square)
  
 try {
  const response = await fetch(`${apiUrl}/polygons?appid=${apiKey}`, {
   method: 'POST',
   headers: {
    'Content-Type': 'application/json',
   },
   body: JSON.stringify({
    name: 'Your Polygon Name',
    geo_json: {
     type: 'Feature',
     properties: {
     },
     
        geometry: {
      type: 'Polygon',
      coordinates: [square],
     },
    },
   }),
  });
  if (!response.ok) {
   throw new Error('Failed to create the polygon');
  }
  const data = await response.json();
  console.log('Polygon created:', data);
 } catch (error) {
  console.error('Error creating the polygon:', error.message);
 }
 };
 createPolygon();